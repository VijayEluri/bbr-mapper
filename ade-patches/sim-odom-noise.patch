Index: com/adesim2010/ADESimActorServerImpl.java
===================================================================
--- com/adesim2010/ADESimActorServerImpl.java	(revision 2745)
+++ com/adesim2010/ADESimActorServerImpl.java	(working copy)
@@ -639,6 +639,10 @@
     	return this.model.robot.getPoseEgo();
     }
 
+    public double[] getNoisyPoseEgo() throws RemoteException {
+        return this.model.robot.getNoisyPoseEgo();
+    }
+
     @Override
 	public Double[][] getObjectsAngleAndDistance(String[] lookingForObjects) throws RemoteException {
 		return model.getObjectsAngleAndDistance(lookingForObjects);
Index: com/adesim2010/robot/SimAbstractRobot.java
===================================================================
--- com/adesim2010/robot/SimAbstractRobot.java	(revision 2745)
+++ com/adesim2010/robot/SimAbstractRobot.java	(working copy)
@@ -244,6 +244,10 @@
 		return this.locationSpecifier.getPoseEgo();
 	}
 
+	public double[] getNoisyPoseEgo() {
+		return this.locationSpecifier.getNoisyPoseEgo();
+	}
+
 	public void setAcceleration(double acceleration) {
 		this.acceleration = acceleration;
 	}
Index: com/adesim2010/robot/SimLocationSpecifier.java
===================================================================
--- com/adesim2010/robot/SimLocationSpecifier.java	(revision 2745)
+++ com/adesim2010/robot/SimLocationSpecifier.java	(working copy)
@@ -3,6 +3,7 @@
 import java.awt.geom.AffineTransform;
 import java.awt.geom.Point2D;
 import java.io.Serializable;
+import java.util.Random;
 
 import com.adesim2010.datastructures.SimUtil;
 
@@ -11,8 +12,15 @@
 	
 	private double x, y, theta; // theta is in radians.  this is global in terms of the sim.
 	
+	/// Accurate odometry (required for simulation to work properly)
 	private double odoX, odoY, odoTheta; // this is relative to x,y, and theta at time 0.
+
+	/// Noisy odometry
+	private double noisy_odoX, noisy_odoY, noisy_odoTheta;
 	
+	/// Odometry noise on each update. Taken from ADESim.
+	double[] ododev = {0.05, 0.05, 0.0125}; // Vishesh's stddev
+	Random rand;
 
 	public SimLocationSpecifier() {
 		this(0,0,0,0,0,0);
@@ -29,6 +37,8 @@
 		this.odoX = odo_x;
 		this.odoY = odo_y;
 		this.odoTheta = odo_theta;
+
+		this.rand = new Random();
 	}
 	
 	public SimLocationSpecifier(double x, double y, double theta) {
@@ -65,12 +75,19 @@
 	}
 	
 	public void addLocationOffset(Point2D offset) {
-		odoX = odoX + offset.getX();
-		odoY = odoY + offset.getY();
+		double noiseX = offset.getX() * rand.nextGaussian() * ododev[0];
+		double noiseY = offset.getY() * rand.nextGaussian() * ododev[1];
+		noisy_odoX += offset.getX() + noiseX;
+		noisy_odoY += offset.getY() + noiseY;
+		odoX += offset.getX();
+		odoY += offset.getY();
 		this.x = this.x+offset.getX();
 		this.y = this.y+offset.getY();
 	}
 	public void addThetaOffset(double offset) {
+		// TODO: Noise on theta was disabled in adesim. Why?
+		double noiseTheta = offset * rand.nextGaussian() * ododev[2];
+		noisy_odoTheta = SimUtil.normalizeAngle(noisy_odoTheta + offset + noiseTheta);
 		odoTheta = SimUtil.normalizeAngle(odoTheta + offset);
 		this.theta = SimUtil.normalizeAngle(this.theta + offset);
 	}
@@ -109,4 +126,8 @@
 	public double[] getPoseEgo() {
 		return new double[] {odoX, odoY, odoTheta};
 	}
+
+	public double[] getNoisyPoseEgo() {
+		return new double[] { noisy_odoX, noisy_odoY, noisy_odoTheta };
+	}
 }
Index: com/adesim2010/ADESimActorServer.java
===================================================================
--- com/adesim2010/ADESimActorServer.java	(revision 2745)
+++ com/adesim2010/ADESimActorServer.java	(working copy)
@@ -54,6 +54,8 @@
 
     /** Returns internal odometry readings */
     public double[] getPoseEgo() throws RemoteException;
+
+    public double[] getNoisyPoseEgo() throws RemoteException;
     
     /**
      * Return the Orientation, in degrees.  0 degrees is due east,
